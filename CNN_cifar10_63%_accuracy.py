# -*- coding: utf-8 -*-
"""CNN_cifar10_63%_accuracy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12OkO5y_h3diBqNd2YgTLiePj4qt1ZsGP
"""

from tensorflow import keras
from keras.layers import Input, Dense, Dropout,Conv2D, MaxPool2D, Flatten
from tensorflow.keras import  datasets
from matplotlib import pyplot as plt

(x_train, y_train), (x_test, y_test) = datasets.cifar10.load_data()

x_train.shape

x_test.shape

"""0   airplane
1   automobile
2   bird
3   cat
4   deer
5   dog
6   frog
7   horse
8   ship
9   truck
"""

plt.imshow(x_train[5],cmap="gray")
print(y_train[5])

#Convert the labels into one-hot codes.
num_classes = 10
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)
print(y_train[0])

#Normalize image pixel values.
x_train = x_train/255
x_test = x_test/255

model=keras.Sequential() #Create a network sequence.

model.add(Input(shape=(32,32,3)))
model.add(Conv2D(filters=6,kernel_size = 5,strides = (1,1), padding = 'valid',activation = 'relu'))
#model.add(Conv2D(filters=6,kernel_size = 5,strides = (1,1), padding = 'valid',activation = 'relu',input_shape = (32,32,3)))
model.add(MaxPool2D(pool_size=(2,2), strides = (2,2), padding = 'valid'))

model.add(Conv2D(filters=16,kernel_size = 5,strides = (1,1), padding = 'valid',activation = 'relu'))
model.add(MaxPool2D(pool_size=(2,2), strides = (2,2), padding = 'valid'))

model.add(Flatten())
model.add(Dense(120,activation = 'relu'))
model.add(Dense(84,activation = 'relu'))
model.add(Dense(10,activation = 'softmax'))

model.summary()

model.compile(optimizer='Adam',loss="categorical_crossentropy",metrics=['accuracy']) 
#model.compile(optimizer=keras.optimizers.Adam(),loss="categorical_crossentropy",metrics=['accuracy']) 
results= model.fit(x_train,y_train,epochs=20,batch_size=128,validation_data=(x_test, y_test))

score = model.evaluate(x_test, y_test)

plt.plot(results.history['accuracy'], label='accuracy')
plt.plot(results.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
#plt.ylim([0.5, 1])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(x_test,  y_test)

plt.plot(results.history['loss'])
plt.title('Training losses')
plt.xlabel('epoch')
plt.ylabel('Training losses')

import matplotlib.pyplot as plt
plt.plot(results.history['accuracy'])
plt.ylabel('Training  accuracy')
plt.xlabel('epoch')

import matplotlib.pyplot as plt
plt.plot(results.history['val_accuracy'])
plt.ylabel(' Validation accuracy')
plt.xlabel('epoch')